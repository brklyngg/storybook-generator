import { NextRequest, NextResponse } from 'next/server';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { z } from 'zod';

const ExportRequestSchema = z.object({
  pages: z.array(z.object({
    index: z.number(),
    caption: z.string(),
    imageUrl: z.string(),
  })),
  title: z.string().optional(),
  author: z.string().optional(),
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { pages, title = 'AI Generated Picture Book', author = 'AI Author' } = 
      ExportRequestSchema.parse(body);

    const pdfDoc = await PDFDocument.create();
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    const titlePage = pdfDoc.addPage([612, 792]);
    titlePage.drawText(title, {
      x: 50,
      y: 700,
      size: 24,
      font: boldFont,
      color: rgb(0.2, 0.2, 0.8),
    });
    titlePage.drawText(`By ${author}`, {
      x: 50,
      y: 650,
      size: 16,
      font,
      color: rgb(0.4, 0.4, 0.4),
    });

    titlePage.drawText('Generated by AI', {
      x: 50,
      y: 50,
      size: 10,
      font,
      color: rgb(0.6, 0.6, 0.6),
    });

    for (const page of pages) {
      const pdfPage = pdfDoc.addPage([612, 792]);
      
      pdfPage.drawRectangle({
        x: 50,
        y: 400,
        width: 512,
        height: 300,
        borderColor: rgb(0.8, 0.8, 0.8),
        borderWidth: 2,
      });
      
      pdfPage.drawText('Image Placeholder', {
        x: 250,
        y: 550,
        size: 12,
        font,
        color: rgb(0.6, 0.6, 0.6),
      });

      const wrappedText = wrapText(page.caption, 70);
      const lines = wrappedText.split('\n');
      
      lines.forEach((line, index) => {
        pdfPage.drawText(line, {
          x: 50,
          y: 350 - (index * 20),
          size: 14,
          font,
          color: rgb(0, 0, 0),
        });
      });

      pdfPage.drawText(`Page ${page.index + 1}`, {
        x: 520,
        y: 50,
        size: 10,
        font,
        color: rgb(0.6, 0.6, 0.6),
      });
    }

    const pdfBytes = await pdfDoc.save();

    return new NextResponse(pdfBytes, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${title}.pdf"`,
      },
    });

  } catch (error) {
    console.error('PDF export error:', error);
    return NextResponse.json(
      { error: 'Failed to export PDF' },
      { status: 500 }
    );
  }
}

function wrapText(text: string, maxLength: number): string {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';

  for (const word of words) {
    if ((currentLine + word).length <= maxLength) {
      currentLine += (currentLine ? ' ' : '') + word;
    } else {
      if (currentLine) lines.push(currentLine);
      currentLine = word;
    }
  }
  
  if (currentLine) lines.push(currentLine);
  return lines.join('\n');
}